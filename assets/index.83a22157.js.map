{"version":3,"file":"index.83a22157.js","sources":["../../vite/modulepreload-polyfill","../../src/actions.ts","../../src/types.ts","../../src/GlobalState.tsx","../../src/GlobalCss.tsx","../../src/components/Surface.tsx","../../src/components/Filter.tsx","../../src/components/Checkmark.tsx","../../src/components/TodoList.tsx","../../src/components/Content.tsx","../../src/components/Header.tsx","../../src/components/NewTodoForm.tsx","../../src/theme.ts","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { ColorThemes, Filters, Id } from './types';\n\nexport enum ActionTypes {\n  setColorTheme = 'SET_COLOR_THEME',\n  addTodo = 'ADD_TODO',\n  toggleTodoCompletion = 'TOGGLE_TASK_COMPLETION',\n  deleteTodo = 'DELETE_TODO',\n  clearCompleted = 'CLEAR_COMPLETED',\n  setFilter = 'SET_FILTER',\n}\n\ninterface ISetColorTheme {\n  type: ActionTypes.setColorTheme;\n  payload: ColorThemes;\n}\n\ninterface IAddTodo {\n  type: ActionTypes.addTodo;\n  payload: string;\n}\n\ninterface IToggleTodoCompletion {\n  type: ActionTypes.toggleTodoCompletion;\n  payload: Id;\n}\n\ninterface IDeleteTodo {\n  type: ActionTypes.deleteTodo;\n  payload: Id;\n}\n\ninterface IClearCompleted {\n  type: ActionTypes.clearCompleted;\n}\n\ninterface ISetFilter {\n  type: ActionTypes.setFilter;\n  payload: Filters;\n}\n\nexport type Action =\n  | ISetColorTheme\n  | IAddTodo\n  | IToggleTodoCompletion\n  | IDeleteTodo\n  | IClearCompleted\n  | ISetFilter;\n\nexport const setColorTheme = (colorTheme: ColorThemes): ISetColorTheme => ({\n  type: ActionTypes.setColorTheme,\n  payload: colorTheme,\n});\n\nexport const addTodo = (text: string): IAddTodo => ({\n  type: ActionTypes.addTodo,\n  payload: text,\n});\n\nexport const toggleTodoCompletion = (id: Id): IToggleTodoCompletion => ({\n  type: ActionTypes.toggleTodoCompletion,\n  payload: id,\n});\n\nexport const deleteTodo = (id: Id): IDeleteTodo => ({\n  type: ActionTypes.deleteTodo,\n  payload: id,\n});\n\nexport const clearCompleted = (): IClearCompleted => ({\n  type: ActionTypes.clearCompleted,\n});\n\nexport const setFilter = (value: Filters): ISetFilter => ({\n  type: ActionTypes.setFilter,\n  payload: value,\n});\n","export type Id = string;\n\nexport interface ITodo {\n  id: Id;\n  task: string;\n  completed: boolean;\n}\n\nexport enum ColorThemes {\n  light = 'light',\n  dark = 'dark',\n}\n\nexport enum Filters {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import produce from 'immer';\nimport { nanoid } from 'nanoid';\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react';\n\nimport { Action, ActionTypes } from './actions';\nimport { ColorThemes, Filters, ITodo } from './types';\n\ninterface IGlobalState {\n  colorTheme: ColorThemes;\n  todos: ITodo[];\n  todosFilter: Filters;\n}\n\nexport const initialState: IGlobalState = {\n  colorTheme: window.matchMedia('(prefers-color-scheme: dark)').matches\n    ? ColorThemes.dark\n    : ColorThemes.light,\n  todos: [\n    {\n      id: nanoid(),\n      task: 'Complete online JavaScript course',\n      completed: true,\n    },\n    { id: nanoid(), task: 'Jog around the park 3x', completed: false },\n    { id: nanoid(), task: '10 minutes meditation', completed: false },\n    { id: nanoid(), task: 'Read for 1 hour', completed: false },\n    { id: nanoid(), task: 'Pick up groceries', completed: false },\n    {\n      id: nanoid(),\n      task: 'Complete Todo App on Frontend Mentor',\n      completed: false,\n    },\n  ],\n  todosFilter: Filters.all,\n};\n\nexport const reducer = produce((state: IGlobalState, action: Action): void => {\n  switch (action.type) {\n    case ActionTypes.setColorTheme: {\n      state.colorTheme = action.payload;\n      break;\n    }\n\n    case ActionTypes.addTodo: {\n      const todo: ITodo = {\n        id: nanoid(),\n        task: action.payload,\n        completed: false,\n      };\n      state.todos.push(todo);\n      break;\n    }\n\n    case ActionTypes.toggleTodoCompletion: {\n      const todo = state.todos.find(({ id }) => id === action.payload);\n      if (todo) todo.completed = !todo.completed;\n      break;\n    }\n\n    case ActionTypes.deleteTodo: {\n      const index = state.todos.findIndex(({ id }) => id === action.payload);\n      if (index !== -1) state.todos.splice(index, 1);\n      break;\n    }\n\n    case ActionTypes.clearCompleted: {\n      const todos = state.todos.filter(({ completed }) => !completed);\n      state.todos = todos;\n      break;\n    }\n\n    case ActionTypes.setFilter: {\n      state.todosFilter = action.payload;\n      break;\n    }\n\n    default:\n      break;\n  }\n});\n\nexport const stateContext = createContext<\n  [IGlobalState, React.Dispatch<Action>]\n>([initialState, () => {}]);\n\nexport const useGlobalState = (): [IGlobalState, React.Dispatch<Action>] => {\n  return useContext(stateContext);\n};\n\nconst GlobalState: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState, (initState) => {\n    try {\n      const lsState = window.localStorage.getItem('global-state');\n      return lsState ? JSON.parse(lsState) : initState;\n    } catch (error) {\n      console.error(\n        \"Local storage is not accessible, the app state won't be saved!\",\n      );\n      return initState;\n    }\n  });\n\n  useEffect(() => {\n    try {\n      window.localStorage.setItem('global-state', JSON.stringify(state));\n    } catch (error) {}\n  }, [state]);\n\n  const valueToPass = useMemo<[IGlobalState, React.Dispatch<Action>]>(\n    () => [state, dispatch],\n    [state],\n  );\n\n  return (\n    <stateContext.Provider value={valueToPass}>\n      {children}\n    </stateContext.Provider>\n  );\n};\n\nexport default GlobalState;\n","import { css, Global } from '@emotion/react';\n\nimport { ITheme } from './theme';\n\nconst globalCss = ({ palette }: ITheme) =>\n  css`\n    html {\n      font-size: 62.5%;\n    }\n\n    body {\n      background-color: ${palette.bgPrimary};\n      color: ${palette.text};\n      font-size: 1.6rem;\n      font-family: 'Josefin Sans', sans-serif;\n      line-height: normal;\n      letter-spacing: -0.015em;\n      word-break: break-word;\n    }\n  `;\n\nexport const srOnly = css`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  border: 0;\n  overflow: hidden;\n  white-space: nowrap;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n`;\n\nconst GlobalCss: React.FC = () => {\n  return <Global styles={globalCss} />;\n};\n\nexport default GlobalCss;\n","import styled from '@emotion/styled';\n\nexport default styled.div(\n  ({ theme: { palette } }) => `\n    background-color: ${palette.bgSecondary};\n    border-radius: 0.5rem;\n    box-shadow: 0 3.4rem 3rem hsla(0, 0%, 0%, 0.1);\n  `,\n);\n","import styled from '@emotion/styled';\n\nimport { srOnly } from '../GlobalCss';\nimport { Filters } from '../types';\nimport Surface from './Surface';\n\nconst Fieldset = styled(Surface.withComponent('fieldset'))(\n  ({ theme: { mq } }) => `\n    margin: 1.6rem 0 0;\n    padding: 1.8rem 1.6rem 1.6rem;\n    border: 0;\n    font-size: 1.4rem;\n    font-weight: 700;\n    text-align: center;\n\n    ${mq.mdUp} {\n      position: absolute;\n      bottom: 0;\n      left: 50%;\n      max-width: 22rem;\n      background-color: transparent;\n      box-shadow: none;\n      transform: translateX(-50%);\n    }\n  `,\n);\n\nconst Option = styled.label<{ checked?: boolean }>(\n  ({ theme: { palette }, checked }) => `\n    display: inline-block;\n    position: relative;\n    color: ${checked ? palette.accent : palette.textSecondary};\n    text-transform: capitalize;\n    transition: color 0.15s;\n\n    &:not(:first-of-type) {\n      margin-left: 1.8rem;\n    }\n\n    &:hover {\n      ${checked ? '' : `color: ${palette.text};`}\n    }\n\n    & > input {\n      appearance: none;\n      position: absolute;\n      top: 0;\n      left: 0;\n      margin: 0;\n      width: 100%;\n      height: 100%;\n      cursor: pointer;\n    }\n  `,\n);\n\ninterface FilterProps {\n  option: Filters;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Filter: React.FC<FilterProps> = ({ option, onChange }) => {\n  return (\n    <Fieldset aria-controls='todo-list'>\n      <legend css={srOnly}>Filter todos</legend>\n      {Object.values(Filters).map((value) => (\n        <Option checked={option === value} key={value}>\n          {value}\n          <input\n            type='radio'\n            name='filter'\n            value={value}\n            checked={option === value}\n            onChange={onChange}\n          />\n        </Option>\n      ))}\n    </Fieldset>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nimport { srOnly } from '../GlobalCss';\n\nconst Label = styled.label<{ checked: boolean }>(\n  ({ theme: { mq, palette }, checked }) => `\n    --size: 2rem;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    width: var(--size);\n    height: var(--size);\n    ${checked ? '' : `border: 0.1rem solid ${palette.muted};`}\n    border-radius: 50%;\n    background:\n      center no-repeat url('./icon-check.svg'),\n      linear-gradient(\n        135deg,\n        ${palette.bgGradient.from},\n        ${palette.bgGradient.to}\n      );\n\n    &:hover {\n      border: 0;\n    }\n\n    ${mq.smUp} {\n      --size: 2.4rem;\n    }\n\n    & > input {\n      grid-area: 1 / 1 / -1 / -1;\n      appearance: none;\n      margin: 0;\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      cursor: pointer;\n    }\n\n    & > span:last-of-type {\n      display: block;\n      grid-area: 1 / 1 / -1 / -1;\n      width: calc(var(--size) - 0.2rem);\n      height: calc(var(--size) - 0.2rem);\n      border-radius: 50%;\n      ${checked ? '' : `background-color: ${palette.bgSecondary};`}\n    }\n  `,\n);\n\ninterface CheckmarkProps {\n  checked: boolean;\n  onChange: () => void;\n}\n\nconst Checkmark: React.FC<CheckmarkProps> = ({ checked, onChange }) => {\n  return (\n    <Label checked={checked}>\n      <span css={srOnly}>{checked ? 'Completed' : 'To do'}</span>\n      <span />\n      <input type='checkbox' checked={checked} onChange={onChange} />\n    </Label>\n  );\n};\n\nexport default Checkmark;\n","import styled from '@emotion/styled';\n\nimport { deleteTodo, toggleTodoCompletion } from '../actions';\nimport { srOnly } from '../GlobalCss';\nimport { useGlobalState } from '../GlobalState';\nimport { Filters, Id } from '../types';\nimport Checkmark from './Checkmark';\n\nconst List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst Item = styled.li(\n  ({ theme: { mq, palette } }) => `\n    display: flex;\n    align-items: center;\n    padding: 1.6rem 2rem;\n    box-sizing: content-box;\n    border-bottom: 0.1rem solid ${palette.muted};\n\n    & > :not(:last-child) {\n      margin-right: 1.2rem;\n    }\n\n    ${mq.smUp} {\n      padding: 1.8rem 2.2rem;\n\n      & > :not(:last-child) {\n        margin-right: 1.8rem;\n      }\n\n      &:hover > button {\n        background-image: url('./icon-cross.svg');\n      }\n    }\n\n    ${mq.mdUp} {\n      padding: 2rem 2.4rem;\n\n      & > :not(:last-child) {\n        margin-right: 2.4rem;\n      }\n    }\n  `,\n);\n\nconst Task = styled.p<{ completed?: boolean }>(\n  ({ theme: { mq, palette }, completed }) => `\n    flex: 1;\n    font-size: 1.2rem;\n\n    ${\n      completed\n        ? `\n          text-decoration: line-through;\n          color: ${palette.textSecondary};\n        `\n        : ''\n    }\n\n    ${mq.smUp} {\n      font-size: 1.5rem;\n    }\n\n    ${mq.mdUp} {\n      font-size: 1.8rem;\n    }\n  `,\n);\n\nconst DeleteBtn = styled.button(\n  ({ theme: { mq, palette } }) => `\n    --size: 1.2rem;\n    width: 3.4rem;\n    height: 3.4rem;\n    border: 0;\n    border-radius: 0.4rem;\n    padding: 0;\n    margin: calc((3.4rem - var(--size)) / -2);\n    background: center / var(--size) no-repeat url('./icon-cross.svg');\n    cursor: pointer;\n    transition: background-color 0.15s;\n\n    &:hover,\n    &:active {\n      background-color: ${palette.bgHover};\n    }\n\n    &:focus {\n      background-image: url('./icon-cross.svg');\n    }\n\n    ${mq.smUp} {\n      --size: 1.5rem;\n      background-image: none;\n    }\n\n    ${mq.mdUp} {\n      --size: 1.8rem;\n    }\n  `,\n);\n\nconst matchTodo = {\n  [Filters.all]: () => true,\n  [Filters.active]: (completed: boolean) => !completed,\n  [Filters.completed]: (completed: boolean) => completed,\n};\n\nconst TodoList: React.FC = () => {\n  const [{ todos, todosFilter }, dispatch] = useGlobalState();\n\n  const handleCheckmarkChange = (id: Id) => (): void => {\n    dispatch(toggleTodoCompletion(id));\n  };\n\n  const handleDeleteClick = (id: Id) => (): void => {\n    dispatch(deleteTodo(id));\n  };\n\n  const filteredTodos = todos.filter(({ completed }) =>\n    matchTodo[todosFilter](completed),\n  );\n\n  return (\n    <List id='todo-list' aria-label='Todo list'>\n      {filteredTodos.map(({ id, task, completed }) => (\n        <Item key={id}>\n          <Checkmark checked={completed} onChange={handleCheckmarkChange(id)} />\n          <Task completed={completed}>{task}</Task>\n          <DeleteBtn\n            type='button'\n            onClick={handleDeleteClick(id)}\n            aria-controls='todo-list'\n          >\n            <span css={srOnly}>Delete task</span>\n          </DeleteBtn>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default TodoList;\n","import styled from '@emotion/styled';\n\nimport { clearCompleted, setFilter } from '../actions';\nimport { useGlobalState } from '../GlobalState';\nimport { Filters } from '../types';\nimport Filter from './Filter';\nimport Surface from './Surface';\nimport TodoList from './TodoList';\n\nconst Container = styled.main(\n  ({ theme: { mq } }) => `\n    position: relative;\n    margin-top: 1.6rem;\n\n    ${mq.mdUp} {\n      margin-top: 2.4rem;\n    }\n  `,\n);\n\nconst Status = styled.div(\n  ({ theme: { palette, mq } }) => `\n    display: grid;\n    grid-template-columns: auto auto;\n    grid-gap: 1rem;\n    align-items: center;\n    justify-content: space-between;\n    padding: 1.8rem 2rem 2rem;\n    color: ${palette.textSecondary};\n    font-size: 1.2rem;\n\n    & > span {\n      grid-area: 1 / 1 / -1 / 2;\n    }\n\n    & > button {\n      justify-self: end;\n      grid-area: 1 / -2 / -1 / -1;\n    }\n\n    ${mq.smUp} {\n      padding: 1.9rem 2.4rem 1.7rem;\n      font-size: 1.4rem;\n    }\n\n    ${mq.mdUp} {\n      grid-template-columns: 1fr 22rem 1fr;\n      min-height: 5rem;\n    }\n  `,\n);\n\nconst ClearBtn = styled.button(\n  ({ theme: { palette } }) => `\n    margin: -1rem -0.4rem;\n    padding: 1rem 0.4rem;\n    border: 0;\n    border-radius: 0.5rem;\n    background: none;\n    color: inherit;\n    cursor: pointer;\n    transition: background-color 0.2s, color 0.2s;\n\n    &:hover, &:active {\n      background-color: ${palette.bgHover};\n      color: ${palette.text};\n    }\n  `,\n);\n\nconst Content: React.FC = () => {\n  const [{ todos, todosFilter }, dispatch] = useGlobalState();\n  const countText = `${todos.length} item${todos.length === 1 ? '' : 's'} left`;\n\n  const handleClearBtnClick = (): void => {\n    dispatch(clearCompleted());\n  };\n\n  const handleFilterChange = ({\n    currentTarget,\n  }: React.ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setFilter(currentTarget.value as Filters));\n  };\n\n  return (\n    <Container>\n      <Surface>\n        <TodoList />\n        <Status>\n          <span role='status'>{countText}</span>\n          <ClearBtn type='button' onClick={handleClearBtnClick}>\n            Clear Completed\n          </ClearBtn>\n        </Status>\n      </Surface>\n      <Filter option={todosFilter} onChange={handleFilterChange} />\n    </Container>\n  );\n};\n\nexport default Content;\n","import styled from '@emotion/styled';\n\nimport { setColorTheme } from '../actions';\nimport { srOnly } from '../GlobalCss';\nimport { useGlobalState } from '../GlobalState';\nimport { ColorThemes } from '../types';\n\nconst Container = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Heading = styled.h1(\n  ({ theme: { palette, mq } }) => `\n    color: ${palette.white};\n    font-size: 2.7rem;\n    font-weight: 700;\n    letter-spacing: 0.37em;\n    text-transform: uppercase;\n\n    ${mq.smUp} {\n      font-size: 3.4rem;\n    }\n\n    ${mq.mdUp} {\n      font-size: 4rem;\n    }\n  `,\n);\n\nconst ThemeSwitch = styled.button(\n  ({ theme: { palette, mq } }) => `\n    width: 4rem;\n    height: 4rem;\n    border: 0;\n    border-radius: 50%;\n    padding: 0;\n    margin: -1rem;\n    background: center / 2rem no-repeat url('./icon-${\n      palette.colorTheme === ColorThemes.dark ? 'sun' : 'moon'\n    }.svg');\n    cursor: pointer;\n    transition: background-color 0.2s;\n\n    &:hover, &:active {\n      background-color: hsla(0, 0%, 100%, 0.3);\n    }\n\n    ${mq.smUp} {\n      margin: -0.7rem;\n      background-size: 2.6rem;\n    }\n  `,\n);\n\nconst Header: React.FC = () => {\n  const [{ colorTheme }, dispatch] = useGlobalState();\n  const isDarkThemeOn = colorTheme === ColorThemes.dark;\n\n  const handleThemeSwitchClick = (): void => {\n    dispatch(\n      setColorTheme(isDarkThemeOn ? ColorThemes.light : ColorThemes.dark),\n    );\n  };\n\n  return (\n    <Container>\n      <Heading>Todo</Heading>\n      <ThemeSwitch\n        type='button'\n        role='switch'\n        aria-checked={isDarkThemeOn}\n        onClick={handleThemeSwitchClick}\n      >\n        <span css={srOnly}>Dark theme</span>\n      </ThemeSwitch>\n    </Container>\n  );\n};\n\nexport default Header;\n","import styled from '@emotion/styled';\n\nimport { addTodo } from '../actions';\nimport { srOnly } from '../GlobalCss';\nimport { useGlobalState } from '../GlobalState';\nimport Surface from './Surface';\n\nconst Form = styled(Surface.withComponent('form'))(\n  ({ theme: { mq } }) => `\n    margin-top: 3.3rem;\n\n    ${mq.mdUp} {\n      margin-top: 4rem;\n    }\n  `,\n);\n\nconst Label = styled.label`\n  display: grid;\n  align-items: center;\n`;\n\nconst Icon = styled.span(\n  ({ theme: { palette, mq } }) => `\n    --size: 2rem;\n    grid-area: 1 / 1 / 2 / -1;\n    display: block;\n    margin-left: 2rem;\n    width: var(--size);\n    height: var(--size);\n    border: 0.1rem solid ${palette.muted};\n    border-radius: 50%;\n\n    ${mq.smUp} {\n      --size: 2.4rem;\n      margin-left: 2.2rem;\n    }\n\n    ${mq.mdUp} {\n      margin-left: 2.4rem;\n    }\n  `,\n);\n\nconst TextField = styled.input(\n  ({ theme: { palette, mq } }) => `\n    grid-area: 1 / 1 / -1 / -1;\n    padding: 1.9rem 2rem 1.7rem 5.2rem;\n    width: 100%;\n    border: 0;\n    background-color: transparent;\n    font-size: 1.2rem;\n    color: ${palette.text};\n\n    &::placeholder {\n      color: ${palette.textSecondary};\n    }\n\n    ${mq.smUp} {\n      padding: 2rem 2.2rem 2rem 6.4rem;\n      font-size: 1.6rem;\n    }\n\n    ${mq.mdUp} {\n      padding: 2.4rem 2.4rem 2.2rem 7.2rem;\n      font-size: 1.8rem;\n    }\n  `,\n);\n\nconst NewTodoForm: React.FC = () => {\n  const [, dispatch] = useGlobalState();\n\n  const handleNewTodoSubmit = (\n    event: React.FormEvent<HTMLFormElement>,\n  ): void => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const task = (new FormData(form).get('new-todo') as string).trim();\n\n    if (!task) return;\n\n    dispatch(addTodo(task));\n    form.reset();\n  };\n\n  return (\n    <Form aria-label='New todo form' onSubmit={handleNewTodoSubmit}>\n      <Label>\n        <span css={srOnly}>New task</span>\n        <Icon />\n        <TextField\n          type='text'\n          name='new-todo'\n          placeholder='Create a new todo…'\n        />\n      </Label>\n    </Form>\n  );\n};\n\nexport default NewTodoForm;\n","import { ColorThemes } from './types';\n\nexport interface ITheme {\n  palette: {\n    accent: string;\n    bgGradient: { from: string; to: string };\n    muted: string;\n    white: string;\n    bgPrimary: string;\n    bgSecondary: string;\n    bgHover: string;\n    text: string;\n    textSecondary: string;\n    colorTheme: ColorThemes;\n  };\n  mq: {\n    smUp: string;\n    mdUp: string;\n    xlUp: string;\n  };\n}\n\n/** @arg {number} breakpoint In pixels */\nconst minWidthMq = (breakpoint: number): string =>\n  `@media (min-width: ${(breakpoint / 16).toFixed(2)}em)`;\n\nconst palettes = {\n  [ColorThemes.light]: {\n    bgPrimary: 'hsl(0, 0%, 98%)',\n    bgSecondary: 'hsl(0, 0%, 100%)',\n    bgHover: 'hsl(233, 11%, 84%)',\n    text: 'hsl(235, 19%, 35%)',\n    textSecondary: 'hsl(236, 9%, 61%)',\n    muted: 'hsl(234, 39%, 85%)',\n  },\n  [ColorThemes.dark]: {\n    bgPrimary: 'hsl(235, 21%, 11%)',\n    bgSecondary: 'hsl(235, 24%, 19%)',\n    bgHover: 'hsl(235, 21%, 11%)',\n    text: 'hsl(234, 39%, 85%)',\n    textSecondary: 'hsl(234, 11%, 52%)',\n    muted: 'hsl(233, 14%, 35%)',\n  },\n};\n\nconst getTheme = (colorTheme: ColorThemes): ITheme => ({\n  palette: {\n    accent: 'hsl(220, 98%, 61%)',\n    bgGradient: { from: 'hsl(192, 100%, 67%)', to: 'hsl(280, 87%, 65%)' },\n    white: 'hsl(0, 0%, 100%)',\n    ...(palettes[colorTheme] ?? {}),\n    colorTheme,\n  },\n  mq: {\n    smUp: minWidthMq(450),\n    mdUp: minWidthMq(768),\n    xlUp: minWidthMq(1440),\n  },\n});\n\nexport default getTheme;\n","import { ThemeProvider } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport Content from './components/Content';\nimport Header from './components/Header';\nimport NewTodoForm from './components/NewTodoForm';\nimport GlobalCss from './GlobalCss';\nimport { useGlobalState } from './GlobalState';\nimport getTheme from './theme';\n\nconst Background = styled.div(\n  ({ theme: { mq, palette } }) => `\n    background: top center / 100% auto no-repeat\n      url('./bg-mobile-${palette.colorTheme}.jpg');\n    padding: 4.8rem 2.4rem;\n    min-height: 100vh;\n\n    ${mq.smUp} {\n      background-image: url('./bg-desktop-${palette.colorTheme}.jpg');\n      background-size: auto;\n      padding: 6.4rem 3rem;\n    }\n\n    ${mq.mdUp} {\n      padding: 7.8rem 3rem;\n    }\n\n    ${mq.xlUp} {\n      background-size: 100%;\n    }\n  `,\n);\n\nconst Container = styled.div`\n  max-width: 54rem;\n  margin: 0 auto;\n`;\n\nconst Hint = styled.p(\n  ({ theme: { palette, mq } }) => `\n    margin-top: 4.3rem;\n    font-size: 1.4rem;\n    text-align: center;\n    color: ${palette.textSecondary};\n\n    ${mq.mdUp} {\n      margin-top: 5.2rem;\n    }\n  `,\n);\n\nconst App: React.FC = () => {\n  const [{ colorTheme }] = useGlobalState();\n\n  return (\n    <ThemeProvider theme={getTheme(colorTheme)}>\n      <GlobalCss />\n      <Background>\n        <Container>\n          <Header />\n          <NewTodoForm />\n          <Content />\n          <Hint>Drag and drop to reorder list</Hint>\n        </Container>\n      </Background>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport GlobalState from './GlobalState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalState>\n      <App />\n    </GlobalState>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"names":["ActionTypes","setColorTheme","colorTheme","type","payload","addTodo","text","toggleTodoCompletion","id","deleteTodo","clearCompleted","setFilter","value","ColorThemes","Filters","initialState","window","matchMedia","matches","dark","light","todos","nanoid","task","completed","todosFilter","all","reducer","produce","state","action","todo","push","find","index","findIndex","splice","filter","stateContext","createContext","useGlobalState","useContext","GlobalState","children","dispatch","useReducer","initState","lsState","localStorage","getItem","JSON","parse","error","setItem","stringify","valueToPass","useMemo","_jsx","globalCss","palette","bgPrimary","srOnly","GlobalCss","_styled","theme","bgSecondary","Fieldset","Surface","withComponent","mq","mdUp","Option","checked","accent","textSecondary","Filter","option","onChange","_jsxs","Object","values","map","Label","muted","bgGradient","from","to","smUp","Checkmark","List","Item","Task","DeleteBtn","bgHover","matchTodo","active","TodoList","handleCheckmarkChange","handleDeleteClick","filteredTodos","Container","Status","ClearBtn","Content","countText","length","handleClearBtnClick","handleFilterChange","currentTarget","Heading","white","ThemeSwitch","Header","isDarkThemeOn","handleThemeSwitchClick","Form","Icon","TextField","NewTodoForm","event","preventDefault","form","FormData","get","trim","reset","minWidthMq","breakpoint","toFixed","palettes","getTheme","xlUp","Background","Hint","App","ReactDOM","render","document","getElementById"],"mappings":"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"}