{"version":3,"file":"index.ad1cb7cf.js","sources":["../../vite/modulepreload-polyfill","../../src/components/Surface.tsx","../../src/actions.ts","../../src/GlobalCss.tsx","../../src/theme.ts","../../src/GlobalState.tsx","../../src/components/Checkmark.tsx","../../src/components/TodoList.tsx","../../src/components/Content.tsx","../../src/components/Header.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import styled from '@emotion/styled';\n\nexport default styled.div(\n  ({ theme: { palette } }) => `\n    background-color: ${palette.bgSecondary};\n    border-radius: 0.5rem;\n    box-shadow: 0 3.4rem 3rem hsla(0, 0%, 0%, 0.1);\n  `,\n);\n","import { ColorThemes } from './theme';\nimport { Id } from './types';\n\nexport enum ActionTypes {\n  setColorTheme = 'SET_COLOR_THEME',\n  toggleTodoCompletion = 'TOGGLE_TASK_COMPLETION',\n  deleteTodo = 'DELETE_TODO',\n}\n\ninterface ISetColorTheme {\n  type: ActionTypes.setColorTheme;\n  payload: ColorThemes;\n}\n\ninterface IToggleTodoCompletion {\n  type: ActionTypes.toggleTodoCompletion;\n  payload: Id;\n}\n\ninterface IDeleteTodo {\n  type: ActionTypes.deleteTodo;\n  payload: Id;\n}\n\nexport type Action = ISetColorTheme | IToggleTodoCompletion | IDeleteTodo;\n\nexport const setColorTheme = (colorTheme: ColorThemes): ISetColorTheme => ({\n  type: ActionTypes.setColorTheme,\n  payload: colorTheme,\n});\n\nexport const toggleTodoCompletion = (id: Id): IToggleTodoCompletion => ({\n  type: ActionTypes.toggleTodoCompletion,\n  payload: id,\n});\n\nexport const deleteTodo = (id: Id): IDeleteTodo => ({\n  type: ActionTypes.deleteTodo,\n  payload: id,\n});\n","import { css, Global } from '@emotion/react';\n\nimport { ITheme } from './theme';\n\nconst globalCss = ({ palette }: ITheme) =>\n  css`\n    html {\n      font-size: 62.5%;\n    }\n\n    body {\n      background-color: ${palette.bgPrimary};\n      color: ${palette.text};\n      font-size: 1.6rem;\n      font-family: 'Josefin Sans', sans-serif;\n      line-height: normal;\n      letter-spacing: -0.015em;\n      word-break: break-word;\n    }\n  `;\n\nexport const srOnly = css`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  border: 0;\n  overflow: hidden;\n  white-space: nowrap;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n`;\n\nconst GlobalCss: React.FC = () => {\n  return <Global styles={globalCss} />;\n};\n\nexport default GlobalCss;\n","export enum ColorThemes {\n  light = 'light',\n  dark = 'dark',\n}\n\nexport interface ITheme {\n  palette: {\n    accent: string;\n    bgGradient: { from: string; to: string };\n    muted: string;\n    white: string;\n    bgPrimary: string;\n    bgSecondary: string;\n    bgHover: string;\n    text: string;\n    colorTheme: ColorThemes;\n  };\n  mq: {\n    smUp: string;\n    mdUp: string;\n    xlUp: string;\n  };\n}\n\n/** @arg {number} breakpoint In pixels */\nconst minWidthMq = (breakpoint: number): string =>\n  `@media (min-width: ${(breakpoint / 16).toFixed(2)}em)`;\n\nconst palettes = {\n  [ColorThemes.light]: {\n    bgPrimary: 'hsl(0, 0%, 98%)',\n    bgSecondary: 'hsl(0, 0%, 100%)',\n    bgHover: 'hsl(233, 11%, 84%)',\n    text: 'hsl(235, 19%, 35%)',\n    muted: 'hsl(234, 39%, 85%)',\n  },\n  [ColorThemes.dark]: {\n    bgPrimary: 'hsl(235, 21%, 11%)',\n    bgSecondary: 'hsl(235, 24%, 19%)',\n    bgHover: 'hsl(235, 21%, 11%)',\n    text: 'hsl(234, 39%, 85%)',\n    muted: 'hsl(233, 14%, 35%)',\n  },\n};\n\nconst getTheme = (colorTheme: ColorThemes): ITheme => ({\n  palette: {\n    accent: 'hsl(220, 98%, 61%)',\n    bgGradient: { from: 'hsl(192, 100%, 67%)', to: 'hsl(280, 87%, 65%)' },\n    white: 'hsl(0, 0%, 100%)',\n    ...(palettes[colorTheme] ?? {}),\n    colorTheme,\n  },\n  mq: {\n    smUp: minWidthMq(450),\n    mdUp: minWidthMq(768),\n    xlUp: minWidthMq(1440),\n  },\n});\n\nexport default getTheme;\n","import produce from 'immer';\nimport { nanoid } from 'nanoid';\nimport { createContext, useContext, useReducer } from 'react';\n\nimport { Action, ActionTypes } from './actions';\nimport { ColorThemes } from './theme';\nimport { Id } from './types';\n\ninterface ITodo {\n  id: Id;\n  task: string;\n  completed: boolean;\n}\n\ninterface IGlobalState {\n  colorTheme: ColorThemes;\n  todos: ITodo[];\n}\n\nconst initialState: IGlobalState = {\n  colorTheme: ColorThemes.dark,\n  todos: [\n    {\n      id: nanoid(),\n      task: 'Complete online JavaScript course',\n      completed: true,\n    },\n    { id: nanoid(), task: 'Jog around the park 3x', completed: false },\n    { id: nanoid(), task: '10 minutes meditation', completed: false },\n    { id: nanoid(), task: 'Read for 1 hour', completed: false },\n    { id: nanoid(), task: 'Pick up groceries', completed: false },\n    {\n      id: nanoid(),\n      task: 'Complete Todo App on Frontend Mentor',\n      completed: false,\n    },\n  ],\n};\n\nconst reducer = produce((state: IGlobalState, action: Action): void => {\n  switch (action.type) {\n    case ActionTypes.setColorTheme: {\n      state.colorTheme = action.payload;\n      break;\n    }\n    case ActionTypes.toggleTodoCompletion: {\n      const todo = state.todos.find(({ id }) => id === action.payload);\n      if (todo) todo.completed = !todo.completed;\n      break;\n    }\n    case ActionTypes.deleteTodo: {\n      const index = state.todos.findIndex(({ id }) => id === action.payload);\n      if (index !== -1) state.todos.splice(index, 1);\n      break;\n    }\n    default:\n      break;\n  }\n});\n\nconst stateContext = createContext<[IGlobalState, React.Dispatch<Action>]>([\n  initialState,\n  () => {},\n]);\n\nexport const useGlobalState = (): [IGlobalState, React.Dispatch<Action>] => {\n  return useContext(stateContext);\n};\n\nconst GlobalState: React.FC = ({ children }) => {\n  const state = useReducer(reducer, initialState);\n\n  return (\n    <stateContext.Provider value={state}>{children}</stateContext.Provider>\n  );\n};\n\nexport default GlobalState;\n","import styled from '@emotion/styled';\n\nimport { srOnly } from '../GlobalCss';\n\nconst Label = styled.label<{ checked: boolean }>(\n  ({ theme: { mq, palette }, checked }) => `\n    --size: 2rem;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    width: var(--size);\n    height: var(--size);\n    ${checked ? '' : `border: 0.1rem solid ${palette.muted};`}\n    border-radius: 50%;\n    background:\n      center no-repeat url('./icon-check.svg'),\n      linear-gradient(\n        135deg,\n        ${palette.bgGradient.from},\n        ${palette.bgGradient.to}\n      );\n\n    &:hover {\n      border: 0;\n    }\n\n    ${mq.smUp} {\n      --size: 2.4rem;\n    }\n\n    & > input {\n      grid-area: 1 / 1 / -1 / -1;\n      appearance: none;\n      margin: 0;\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      cursor: pointer;\n    }\n\n    & > span:last-of-type {\n      display: block;\n      grid-area: 1 / 1 / -1 / -1;\n      width: calc(var(--size) - 0.2rem);\n      height: calc(var(--size) - 0.2rem);\n      border-radius: 50%;\n      ${checked ? '' : `background-color: ${palette.bgSecondary};`}\n    }\n  `,\n);\n\ninterface CheckmarkProps {\n  checked: boolean;\n  onChange: () => void;\n}\n\nconst Checkmark: React.FC<CheckmarkProps> = ({ checked, onChange }) => {\n  return (\n    <Label checked={checked}>\n      <span css={srOnly}>{checked ? 'Completed' : 'To do'}</span>\n      <span />\n      <input type='checkbox' checked={checked} onChange={onChange} />\n    </Label>\n  );\n};\n\nexport default Checkmark;\n","import styled from '@emotion/styled';\n\nimport { deleteTodo, toggleTodoCompletion } from '../actions';\nimport { srOnly } from '../GlobalCss';\nimport { useGlobalState } from '../GlobalState';\nimport { Id } from '../types';\nimport Checkmark from './Checkmark';\n\nconst List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst Item = styled.li(\n  ({ theme: { mq, palette } }) => `\n    display: flex;\n    align-items: center;\n    padding: 1.4rem 2rem;\n    box-sizing: content-box;\n\n    &:not(:first-of-type) {\n      border-top: 0.1rem solid ${palette.muted};\n    }\n\n    & > :not(:last-child) {\n      margin-right: 1.2rem;\n    }\n\n    ${mq.smUp} {\n      padding: 1.6rem 2.2rem;\n\n      & > :not(:last-child) {\n        margin-right: 1.8rem;\n      }\n\n      &:hover > button {\n        opacity: 1;\n      }\n    }\n\n    ${mq.mdUp} {\n      padding: 2rem 2.4rem;\n\n      & > :not(:last-child) {\n        margin-right: 2.4rem;\n      }\n    }\n  `,\n);\n\nconst Task = styled.p<{ completed?: boolean }>(\n  ({ theme: { mq, palette }, completed }) => `\n    flex: 1;\n    font-size: 1.2rem;\n\n    ${\n      completed &&\n      `\n        text-decoration: line-through;\n        color: ${palette.muted};\n      `\n    }\n\n    ${mq.smUp} {\n      font-size: 1.5rem;\n    }\n\n    ${mq.mdUp} {\n      font-size: 1.8rem;\n    }\n  `,\n);\n\nconst DeleteBtn = styled.button(\n  ({ theme: { mq, palette } }) => `\n    --size: 1.2rem;\n    width: 3.4rem;\n    height: 3.4rem;\n    border: 0;\n    border-radius: 0.4rem;\n    padding: 0;\n    margin: calc((3.4rem - var(--size)) / -2);\n    background: center / var(--size) no-repeat url('./icon-cross.svg');\n    cursor: pointer;\n    transition: background-color 0.15s;\n\n    &:hover,\n    &:active {\n      background-color: ${palette.bgHover};\n    }\n\n    ${mq.smUp} {\n      --size: 1.5rem;\n      opacity: 0;\n    }\n\n    ${mq.mdUp} {\n      --size: 1.8rem;\n    }\n  `,\n);\n\nconst TodoList: React.FC = () => {\n  const [{ todos }, dispatch] = useGlobalState();\n\n  const handleCheckmarkChange = (id: Id) => (): void => {\n    dispatch(toggleTodoCompletion(id));\n  };\n\n  const handleDeleteClick = (id: Id) => (): void => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <List id='todo-list'>\n      {todos.map(({ id, task, completed }) => (\n        <Item key={id}>\n          <Checkmark checked={completed} onChange={handleCheckmarkChange(id)} />\n          <Task completed={completed}>{task}</Task>\n          <DeleteBtn type='button' onClick={handleDeleteClick(id)}>\n            <span css={srOnly}>Delete task</span>\n          </DeleteBtn>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default TodoList;\n","import Surface from './Surface';\nimport TodoList from './TodoList';\n\nconst Content: React.FC = () => {\n  return (\n    <Surface as='main' css={{ marginTop: '1.6rem' }}>\n      <TodoList />\n    </Surface>\n  );\n};\n\nexport default Content;\n","import styled from '@emotion/styled';\n\nimport { setColorTheme } from '../actions';\nimport { srOnly } from '../GlobalCss';\nimport { useGlobalState } from '../GlobalState';\nimport { ColorThemes } from '../theme';\n\nconst Container = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Heading = styled.h1(\n  ({ theme: { palette, mq } }) => `\n    color: ${palette.white};\n    font-size: 2.7rem;\n    font-weight: 700;\n    letter-spacing: 0.37em;\n    text-transform: uppercase;\n\n    ${mq.smUp} {\n      font-size: 3.4rem;\n    }\n\n    ${mq.mdUp} {\n      font-size: 4rem;\n    }\n  `,\n);\n\nconst ThemeSwitch = styled.button(\n  ({ theme: { palette, mq } }) => `\n    width: 4rem;\n    height: 4rem;\n    border: 0;\n    border-radius: 50%;\n    padding: 0;\n    margin: -1rem;\n    background: center / 2rem no-repeat url('./icon-${\n      palette.colorTheme === ColorThemes.dark ? 'sun' : 'moon'\n    }.svg');\n    cursor: pointer;\n    transition: background-color 0.2s;\n\n    &:hover, &:active {\n      background-color: hsla(0, 0%, 100%, 0.3);\n    }\n\n    ${mq.smUp} {\n      margin: -0.7rem;\n      background-size: 2.6rem;\n    }\n  `,\n);\n\nconst Header: React.FC = () => {\n  const [{ colorTheme }, dispatch] = useGlobalState();\n  const isDarkThemeOn = colorTheme === ColorThemes.dark;\n\n  const handleThemeSwitchClick = (): void => {\n    dispatch(\n      setColorTheme(isDarkThemeOn ? ColorThemes.light : ColorThemes.dark),\n    );\n  };\n\n  return (\n    <Container>\n      <Heading>Todo</Heading>\n      <ThemeSwitch\n        role='switch'\n        aria-checked={isDarkThemeOn}\n        onClick={handleThemeSwitchClick}\n      >\n        <span css={srOnly}>Dark theme</span>\n      </ThemeSwitch>\n    </Container>\n  );\n};\n\nexport default Header;\n","import { ThemeProvider } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport Content from './components/Content';\nimport Header from './components/Header';\nimport GlobalCss from './GlobalCss';\nimport { useGlobalState } from './GlobalState';\nimport getTheme from './theme';\n\nconst Background = styled.div(\n  ({ theme: { mq, palette } }) => `\n    background: top center / 100% auto no-repeat\n      url('./bg-mobile-${palette.colorTheme}.jpg');\n    padding: 4.8rem 2.4rem;\n    min-height: 100vh;\n\n    ${mq.smUp} {\n      background-image: url('./bg-desktop-${palette.colorTheme}.jpg');\n      background-size: auto;\n      padding: 6.4rem 3rem;\n    }\n\n    ${mq.mdUp} {\n      padding: 7.8rem 3rem;\n    }\n\n    ${mq.xlUp} {\n      background-size: 100%;\n    }\n  `,\n);\n\nconst Container = styled.div`\n  max-width: 54rem;\n  margin: 0 auto;\n`;\n\nconst App: React.FC = () => {\n  const [{ colorTheme }] = useGlobalState();\n\n  return (\n    <ThemeProvider theme={getTheme(colorTheme)}>\n      <GlobalCss />\n      <Background>\n        <Container>\n          <Header />\n          <Content />\n        </Container>\n      </Background>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport GlobalState from './GlobalState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalState>\n      <App />\n    </GlobalState>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"names":["_styled","theme","palette","bgSecondary","ActionTypes","setColorTheme","colorTheme","type","payload","toggleTodoCompletion","id","deleteTodo","globalCss","bgPrimary","text","srOnly","GlobalCss","_jsx","ColorThemes","minWidthMq","breakpoint","toFixed","palettes","light","bgHover","muted","dark","getTheme","accent","bgGradient","from","to","white","mq","smUp","mdUp","xlUp","initialState","todos","nanoid","task","completed","reducer","produce","state","action","todo","find","index","findIndex","splice","stateContext","createContext","useGlobalState","useContext","GlobalState","children","useReducer","Label","checked","Checkmark","onChange","_jsxs","List","Item","Task","DeleteBtn","TodoList","dispatch","handleCheckmarkChange","handleDeleteClick","map","Content","Container","Heading","ThemeSwitch","Header","isDarkThemeOn","handleThemeSwitchClick","Background","App","ReactDOM","render","document","getElementById"],"mappings":"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"}