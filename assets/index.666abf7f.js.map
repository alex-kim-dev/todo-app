{"version":3,"file":"index.666abf7f.js","sources":["../../vite/modulepreload-polyfill","../../src/actions.ts","../../src/GlobalCss.tsx","../../src/theme.ts","../../src/GlobalState.tsx","../../src/components/Header.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { ColorThemes } from './theme';\n\nexport enum ActionTypes {\n  setColorTheme = 'SET_COLOR_THEME',\n}\n\ninterface ISetColorTheme {\n  type: ActionTypes.setColorTheme;\n  payload: ColorThemes;\n}\n\nexport type Action = ISetColorTheme;\n\nexport const setColorTheme = (colorTheme: ColorThemes): ISetColorTheme => ({\n  type: ActionTypes.setColorTheme,\n  payload: colorTheme,\n});\n","import { css, Global } from '@emotion/react';\n\nimport { ITheme } from './theme';\n\nconst globalCss = ({ palette }: ITheme) =>\n  css`\n    html {\n      font-size: 62.5%;\n    }\n\n    body {\n      background-color: ${palette.bgPrimary};\n      color: ${palette.text};\n      font-size: 1.6rem;\n      font-family: 'Josefin Sans', sans-serif;\n      line-height: normal;\n    }\n  `;\n\nexport const srOnly = css`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  border: 0;\n  overflow: hidden;\n  white-space: nowrap;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n`;\n\nconst GlobalCss: React.FC = () => {\n  return <Global styles={globalCss} />;\n};\n\nexport default GlobalCss;\n","export enum ColorThemes {\n  light = 'light',\n  dark = 'dark',\n}\n\nexport interface ITheme {\n  palette: {\n    accent: string;\n    bgGradient: { from: string; to: string };\n    white: string;\n    bgPrimary: string;\n    bgSecondary: string;\n    text: string;\n    colorTheme: ColorThemes;\n  };\n  mq: {\n    smUp: string;\n    mdUp: string;\n    xlUp: string;\n  };\n}\n\n/** @arg {number} breakpoint In pixels */\nconst minWidthMq = (breakpoint: number): string =>\n  `@media (min-width: ${(breakpoint / 16).toFixed(2)}em)`;\n\nconst palettes = {\n  [ColorThemes.light]: {\n    bgPrimary: 'hsl(0, 0%, 98%)',\n    bgSecondary: 'hsl(236, 33%, 92%)',\n    text: 'hsl(235, 19%, 35%)',\n  },\n  [ColorThemes.dark]: {\n    bgPrimary: 'hsl(235, 21%, 11%)',\n    bgSecondary: 'hsl(0, 0%, 100%)',\n    text: 'hsl(234, 39%, 85%)',\n  },\n};\n\nconst getTheme = (colorTheme: ColorThemes): ITheme => ({\n  palette: {\n    accent: 'hsl(220, 98%, 61%)',\n    bgGradient: { from: 'hsl(192, 100%, 67%)', to: 'hsl(280, 87%, 65%)' },\n    white: 'hsl(0, 0%, 100%)',\n    ...(palettes[colorTheme] ?? {}),\n    colorTheme,\n  },\n  mq: {\n    smUp: minWidthMq(450),\n    mdUp: minWidthMq(768),\n    xlUp: minWidthMq(1440),\n  },\n});\n\nexport default getTheme;\n","import produce from 'immer';\nimport { createContext, useContext, useReducer } from 'react';\n\nimport { Action, ActionTypes } from './actions';\nimport { ColorThemes } from './theme';\n\ninterface IGlobalState {\n  colorTheme: ColorThemes;\n}\n\nconst initialState: IGlobalState = {\n  colorTheme: ColorThemes.dark,\n};\n\nconst reducer = produce((state: IGlobalState, action: Action): void => {\n  switch (action.type) {\n    case ActionTypes.setColorTheme: {\n      state.colorTheme = action.payload;\n      break;\n    }\n    default:\n      break;\n  }\n});\n\nconst stateContext = createContext<[IGlobalState, React.Dispatch<Action>]>([\n  initialState,\n  () => {},\n]);\n\nexport const useGlobalState = (): [IGlobalState, React.Dispatch<Action>] => {\n  return useContext(stateContext);\n};\n\nconst GlobalState: React.FC = ({ children }) => {\n  const state = useReducer(reducer, initialState);\n\n  return (\n    <stateContext.Provider value={state}>{children}</stateContext.Provider>\n  );\n};\n\nexport default GlobalState;\n","import styled from '@emotion/styled';\n\nimport { setColorTheme } from '../actions';\nimport { srOnly } from '../GlobalCss';\nimport { useGlobalState } from '../GlobalState';\nimport { ColorThemes } from '../theme';\n\nconst Container = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Heading = styled.h1(\n  ({ theme: { palette, mq } }) => `\n    color: ${palette.white};\n    font-size: 2.7rem;\n    font-weight: 700;\n    letter-spacing: 0.37em;\n    text-transform: uppercase;\n\n    ${mq.smUp} {\n      font-size: 3.4rem;\n    }\n\n    ${mq.mdUp} {\n      font-size: 4rem;\n    }\n  `,\n);\n\nconst ThemeSwitch = styled.button(\n  ({ theme: { palette, mq } }) => `\n    width: 4rem;\n    height: 4rem;\n    border: 0;\n    border-radius: 50%;\n    padding: 0;\n    margin: -1rem;\n    background: center / 2rem no-repeat url('/icon-${\n      palette.colorTheme === ColorThemes.dark ? 'sun' : 'moon'\n    }.svg');\n    cursor: pointer;\n    transition: background-color 0.2s;\n\n    &:hover, &:active {\n      background-color: hsla(0, 0%, 100%, 0.3);\n    }\n\n    ${mq.smUp} {\n      margin: -0.7rem;\n      background-size: 2.6rem;\n    }\n  `,\n);\n\nconst Header: React.FC = () => {\n  const [{ colorTheme }, dispatch] = useGlobalState();\n  const isDarkThemeOn = colorTheme === ColorThemes.dark;\n\n  const handleThemeSwitchClick = (): void => {\n    dispatch(\n      setColorTheme(isDarkThemeOn ? ColorThemes.light : ColorThemes.dark),\n    );\n  };\n\n  return (\n    <Container>\n      <Heading>Todo</Heading>\n      <ThemeSwitch\n        role='switch'\n        aria-checked={isDarkThemeOn}\n        onClick={handleThemeSwitchClick}\n      >\n        <span css={srOnly}>Dark theme</span>\n      </ThemeSwitch>\n    </Container>\n  );\n};\n\nexport default Header;\n","import { ThemeProvider } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport Header from './components/Header';\nimport GlobalCss from './GlobalCss';\nimport { useGlobalState } from './GlobalState';\nimport getTheme from './theme';\n\nconst Background = styled.div(\n  ({ theme: { mq, palette } }) => `\n    background: top center / 100% auto no-repeat\n      url('/bg-mobile-${palette.colorTheme}.jpg');\n    padding: 4.8rem 2.4rem;\n    min-height: 100vh;\n\n    ${mq.smUp} {\n      background-image: url('/bg-desktop-${palette.colorTheme}.jpg');\n      background-size: auto;\n      padding: 6.4rem 3rem;\n    }\n\n    ${mq.mdUp} {\n      padding: 7.8rem 3rem;\n    }\n\n    ${mq.xlUp} {\n      background-size: 100%;\n    }\n  `,\n);\n\nconst Container = styled.div`\n  max-width: 54rem;\n  margin: 0 auto;\n`;\n\nconst App: React.FC = () => {\n  const [{ colorTheme }] = useGlobalState();\n\n  return (\n    <ThemeProvider theme={getTheme(colorTheme)}>\n      <GlobalCss />\n      <Background>\n        <Container>\n          <Header />\n        </Container>\n      </Background>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport GlobalState from './GlobalState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalState>\n      <App />\n    </GlobalState>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"names":["ActionTypes","setColorTheme","colorTheme","type","payload","globalCss","palette","bgPrimary","text","srOnly","GlobalCss","_jsx","ColorThemes","minWidthMq","breakpoint","toFixed","palettes","light","bgSecondary","dark","getTheme","accent","bgGradient","from","to","white","mq","smUp","mdUp","xlUp","initialState","reducer","produce","state","action","stateContext","createContext","useGlobalState","useContext","GlobalState","children","useReducer","Container","Heading","_styled","theme","ThemeSwitch","Header","dispatch","isDarkThemeOn","handleThemeSwitchClick","_jsxs","Background","App","ReactDOM","render","document","getElementById"],"mappings":"2gBAAA,KAAM,GAAI,UAAoB,CAC1B,KAAM,GAAU,SAAS,cAAc,QAAQ,QAC/C,GAAI,GAAW,EAAQ,UAAY,EAAQ,SAAS,iBAChD,OAEJ,SAAW,KAAQ,UAAS,iBAAiB,6BACzC,EAAe,GAEnB,GAAI,kBAAiB,AAAC,GAAc,CAChC,SAAW,KAAY,GACnB,GAAI,EAAS,OAAS,YAGtB,SAAW,KAAQ,GAAS,WACxB,AAAI,EAAK,UAAY,QAAU,EAAK,MAAQ,iBACxC,EAAe,KAG5B,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,KACjD,WAAsB,EAAQ,CAC1B,KAAM,GAAY,GAClB,MAAI,GAAO,WACP,GAAU,UAAY,EAAO,WAC7B,EAAO,gBACP,GAAU,eAAiB,EAAO,gBACtC,AAAI,EAAO,cAAgB,kBACvB,EAAU,YAAc,UACvB,AAAI,EAAO,cAAgB,YAC5B,EAAU,YAAc,OAExB,EAAU,YAAc,cACrB,EAEX,WAAwB,EAAM,CAC1B,GAAI,EAAK,GAEL,OACJ,EAAK,GAAK,GAEV,KAAM,GAAY,EAAa,GAC/B,MAAM,EAAK,KAAM,KAEvB,AAAoB,OCxCVA,GAAL,UAAKA,EAAL,iBACW,oBADNA,gBAWCC,GAAgB,AAACC,KAC5BC,KAAMH,EAAYC,cAClBG,QAASF,ICXLG,EAAY,CAAC,CAAEC,8DAOKA,EAAQC,oBACnBD,EAAQE,wFAOVC,gKAYPC,EAAsB,IACnBC,EAAC,GAAO,OAAQN,OChCbO,GAAL,UAAKA,EAAL,SACG,eACD,SAFGA,WAuBZ,KAAMC,GAAa,AAACC,GACjB,yBAAmC,IAAIC,QAAQ,QAE5CC,EAAW,EACdJ,EAAYK,OAAQ,CACnBV,UAAW,kBACXW,YAAa,qBACbV,KAAM,uBAEPI,EAAYO,MAAO,CAClBZ,UAAW,qBACXW,YAAa,mBACbV,KAAM,uBAIJY,EAAW,AAAClB,iBAChBI,QAAS,KACPe,OAAQ,qBACRC,WAAY,CAAEC,KAAM,sBAAuBC,GAAI,sBAC/CC,MAAO,oBACHT,KAASd,KAATc,OAAwB,IAJrB,CAKPd,eAEFwB,GAAI,CACFC,KAAMd,EAAW,KACjBe,KAAMf,EAAW,KACjBgB,KAAMhB,EAAW,SCxCfiB,EAA6B,CACjC5B,WAAYU,EAAYO,MAGpBY,EAAUC,EAAQ,CAACC,EAAqBC,IAAyB,QAC7DA,EAAO/B,UACRH,GAAYC,iBACTC,WAAagC,EAAO9B,kBAQ1B+B,EAAeC,wBAAsD,CACzEN,EACA,IAAM,KAGKO,EAAiB,IACrBC,qBAAWH,GAGdI,EAAwB,CAAC,CAAEC,cAAe,MACxCP,GAAQQ,qBAAWV,EAASD,SAGhCnB,GAAC,EAAa,UAAS,MAAOsB,gBC/B5BS,yGAKAC,EAAUC,6BACd,CAAC,CAAEC,MAAO,CAAEvC,UAASoB,SAAY;AAAA,aACtBpB,EAAQmB;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,MAMfC,EAAGC;AAAAA;AAAAA;AAAAA;AAAAA,MAIHD,EAAGE;AAAAA;AAAAA;AAAAA,QAMHkB,EAAcF,iCAClB,CAAC,CAAEC,MAAO,CAAEvC,UAASoB,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAQ7BpB,EAAQJ,aAAeU,EAAYO,KAAO,MAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlDO,EAAGC;AAAAA;AAAAA;AAAAA;AAAAA,QAOHoB,EAAmB,IAAM,MACvB,CAAC,CAAE7C,cAAc8C,GAAYX,IAC7BY,EAAgB/C,IAAeU,EAAYO,KAE3C+B,EAAyB,IAAY,GAEvCjD,EAAcgD,EAAgBrC,EAAYK,MAAQL,EAAYO,cAKhEgC,GAACT,aACC/B,EAAC,qBACDA,EAAC,GACC,KAAK,wBACSsC,EACd,QAASC,WAETvC,UAAM,IAAKF,gCChEb2C,EAAaR,8BACjB,CAAC,CAAEC,MAAO,CAAEnB,KAAIpB,cAAiB;AAAA;AAAA,wBAEXA,EAAQJ;AAAAA;AAAAA;AAAAA;AAAAA,MAI1BwB,EAAGC;AAAAA,2CACkCrB,EAAQJ;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,MAK7CwB,EAAGE;AAAAA;AAAAA;AAAAA;AAAAA,MAIHF,EAAGG;AAAAA;AAAAA;AAAAA,QAMHa,yFAKAW,EAAgB,IAAM,MACpB,CAAC,CAAEnD,eAAgBmC,UAGvBc,GAAC,GAAc,MAAO/B,EAASlB,aAC7BS,EAAC,MACDA,EAAC,YACCA,EAAC,YACCA,EAAC,cCvCX2C,EAASC,OACP5C,EAAC,EAAM,qBACLA,EAAC,YACCA,EAAC,UAGL6C,SAASC,eAAe"}